#!/bin/bash

required=$(source settings.example; echo ${!KWM*})
failed=false
for var in ${required[@]}; do
  [[ -z "${!var}" ]] && echo "$var not set." && failed=true
done
if $failed ; then
  echo -e "\n---\n"
  echo -e "Before trying again, you may wish to answer these questions:\n"
  echo "Have I written or generated a settings file yet?"
  echo "Have I run the command \"source <filename>\" yet?"
  echo "Does my settings file contain all the needed variables?"
fi

function render {
  local path=$1
  local source="$(cat $path)"
  for item in "${@:2}"; do
    find=${item%:=*};
    replace=${item#*:=};
    # escape replacement text
    IFS= read -d '' -r < <(sed -e ':a' -e '$!{N;ba' -e '}' -e 's/[&/\]/\\&/g; s/\n/\\&/g' <<< "$replace")
    escaped=${REPLY%$'\n'}
    source="$(
      echo "$source" | sed -e "s^"\\\${${find}}"^$escaped^g"
    )"
  done
  echo "$source"
}

function save {
  local contents=$1
  local path=$2
  cat > $path <<EOF
$contents
EOF
  chmod +x $path
}

# Split comma-delimited environment variables into arrays.
KWM_CONTROLLER_NAMES=(${KWM_CONTROLLER_NAMES//,/ })
KWM_CONTROLLER_SSH_IPS=(${KWM_CONTROLLER_SSH_IPS//,/ })
KWM_CONTROLLER_PRIVATE_IPS=(${KWM_CONTROLLER_PRIVATE_IPS//,/ })
KWM_ETCD_NAMES=(${KWM_ETCD_NAMES//,/ })
KWM_ETCD_SSH_IPS=(${KWM_ETCD_SSH_IPS//,/ })
KWM_ETCD_PRIVATE_IPS=(${KWM_ETCD_PRIVATE_IPS//,/ })
KWM_NODE_NAMES=(${KWM_NODE_NAMES//,/ })
KWM_NODE_SSH_IPS=(${KWM_NODE_SSH_IPS//,/ })
KWM_NODE_PRIVATE_IPS=(${KWM_NODE_PRIVATE_IPS//,/ })

# Derive some additional variables from the supplied input.
KWM_CLUSTER_PATH=cluster/$KWM_CLUSTER_NAME
KWM_MANIFEST_PATH=cluster/$KWM_CLUSTER_NAME/manifests
KWM_PKI_PATH=cluster/$KWM_CLUSTER_NAME/pki
KWM_APISERVER=${KWM_CONTROLLER_SSH_IPS[0]}
for idx in ${!KWM_ETCD_NAMES[@]}; do
  KWM_INITIAL_CLUSTER+=",${KWM_ETCD_NAMES[$idx]}=https://${KWM_ETCD_PRIVATE_IPS[$idx]}:2380"
  KWM_ETCD_HOSTS+=",https://${KWM_ETCD_PRIVATE_IPS[$idx]}:2379"
done
KWM_INITIAL_CLUSTER=${KWM_INITIAL_CLUSTER:1}
KWM_ETCD_HOSTS=${KWM_ETCD_HOSTS:1}

KWM_ROOT_PATH=/etc/kubernetes

render="$(
  render templates/preamble
  render templates/log message:="Welcome to Kubernetes Without Magic" indent:=0
  render templates/log message:="Rendering public key infrastructure." indent:=2
  render templates/local-cmd cmd:="mkdir -p pki"

  render templates/log message:="Generating cluster certificate authority." indent:=4
  render templates/init-ca name:="cluster-ca" subj:="/CN=$KWM_CLUSTER_NAME" basePath:="pki"

  render templates/log message:="Generating private key for cluster admin." indent:="4"
  render templates/private-key name:="root" basePath:="pki"

  render templates/log message:="Generating cluster-ca signed certificate for cluster administrator." indent:="4"
  render templates/signed-cert ca:="cluster-ca" name:="root" subj:="/CN=root/O=system:masters" ext:="" basePath:="pki"

  render templates/log message:="Generating etcd certificate authority." indent:="4"
  render templates/init-ca name:="etcd-ca" subj:="/CN=etcd" basePath:="pki"

  # TODO: get TLS bootstrapping going to eliminate some PKI creation
  # https://kubernetes.io/docs/admin/bootstrap-tokens/
  render templates/log message:="Generating public/private keypair for service accounts" indent:=4 # TODO: expand
  render templates/private-key name:="service-account" basePath:="pki"
  render templates/public-key name:="service-account" basePath:="pki"

  for idx in ${!KWM_ETCD_NAMES[@]}; do
    name=${KWM_ETCD_NAMES[$idx]}
    privateIp=${KWM_ETCD_PRIVATE_IPS[$idx]}
    basePath=$name$KWM_ROOT_PATH

    render templates/log message:="Preparing PKI package for ${name}" indent:=4
    render templates/local-cmd cmd:="mkdir -p $basePath"

    render templates/log message:="Generating private key for client to etcd server communication." indent:=6 # TODO: verify accuracy
    render templates/private-key name:="etcd" basePath:="$basePath"

    render templates/log message:="Generating private key for etcd server to etcd server (peer) communication." indent:=6 # TODO: verify accuracy
    render templates/private-key name:="etcd-peer" basePath:="$basePath"

    render templates/log message:="Generating etcd-ca signed certificate for client to etcd communication (e.g. apiserver)." indent:=6 # TODO: verify accuracy
    render templates/signed-cert ca:="etcd-ca" name:="etcd" subj:="/CN=etcd" ext:="subjectAltName = IP:$privateIp,DNS:$name" basePath:="$basePath"

    render templates/log message:="Generating etcd-ca signed certificate for etcd server to etcd server (peer) communication." indent:=6 # TODO: verify accuracy
    render templates/signed-cert ca:="etcd-ca" name:="etcd-peer" subj:="/CN=etcd-peer" ext:="subjectAltName = IP:$privateIp,DNS:$name" basePath:="$basePath"

    render templates/log message:="Copying shared pem files." indent:=6 # TODO: expand on why
    render templates/local-cmd cmd:="cp pki/etcd*pem $basePath"
  done

  for idx in ${!KWM_CONTROLLER_NAMES[@]}; do
    name=${KWM_CONTROLLER_NAMES[$idx]}
    sshIp=${KWM_CONTROLLER_SSH_IPS[$idx]}
    privateIp=${KWM_CONTROLLER_PRIVATE_IPS[$idx]}
    basePath=$name$KWM_ROOT_PATH

    render templates/log message:="Preparing PKI package for ${name}" indent:=4
    render templates/local-cmd cmd:="mkdir -p $basePath"

    render templates/log message:="Generating private key for client to apiserver communication." indent:=6 # TODO: expand
    render templates/private-key name:="apiserver" basePath:="$basePath"

    render templates/log message:="Generating private key for apiserver communication with kubelets." indent:=6
    render templates/private-key name:="apiserver-to-kubelet" basePath:="$basePath"

    render templates/log message:="Generating cluster-ca signed certificate for client to api server communication." indent:=6
    render templates/signed-cert ca:="cluster-ca" name:="apiserver" subj:="/CN=kube-apiserver" ext:="subjectAltName = IP:$KWM_KUBERNETES_SERVICE_IP,IP:$sshIp,IP:$privateIp,DNS:$name,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster,DNS:kubernetes.default.svc.cluster.local" basePath:="$basePath"

    render templates/log message:="Generating cluster-ca signed certificate for apiserver communication with kubelets." indent:=6
    render templates/signed-cert ca:="cluster-ca" name:="apiserver-to-kubelet" subj:="/CN=kube-apiserver-client/O=system:masters" ext:="" basePath:="$basePath"

    render templates/log message:="Copying shared pem files to PKI package." indent:=6 # TODO: expand on why
    render templates/local-cmd cmd:="cp pki/service-account*pem $basePath"
    render templates/local-cmd cmd:="cp pki/cluster*pem $basePath"
    render templates/local-cmd cmd:="cp pki/etcd*pem $basePath"
  done

  for idx in ${!KWM_NODE_NAMES[@]}; do
    name=${KWM_NODE_NAMES[$idx]}
    privateIp=${KWM_NODE_PRIVATE_IPS[$idx]}
    basePath=$name$KWM_ROOT_PATH

    render templates/log message:="Preparing PKI package for ${name}." indent:=4
    render templates/local-cmd cmd:="mkdir -p $basePath"

    render templates/log message:="Generating private key for kublets." indent:=6 # TODO: expand
    render templates/private-key name:="kubelet" basePath:="$basePath"

    render templates/log message:="Generating private key for kube-router." indent:=6 # TODO: expand
    render templates/private-key name:="kube-router" basePath:="$basePath"

    render templates/log message:="Generating cluster-ca signed certificate for kubelet to apiserver communication." indent:=6
    render templates/signed-cert ca:="cluster-ca" name:="kubelet" subj:="/CN=system:node:$name/O=system:nodes" ext:="subjectAltName = IP:$privateIp,DNS:$name" basePath:="$basePath"

    render templates/log message:="Generating cluster-ca signed certificate for kubelet to apiserver communication." indent:=6
    render templates/signed-cert ca:="cluster-ca" name:="kube-router" subj:="/CN=kube-proxy" ext:="" basePath:="$basePath"

    render templates/log message:="Copying shared pem files." indent:=6 # TODO: expand
    render templates/local-cmd cmd:="cp pki/cluster-ca.pem $basePath"
  done

  render templates/log message:="Rendering configuration." indent:=2

  for idx in ${!KWM_ETCD_NAMES[@]}; do
    name=${KWM_ETCD_NAMES[$idx]}
    privateIp=${KWM_ETCD_PRIVATE_IPS[$idx]}
    servicePath=$name/etc/systemd/system
    render templates/log message:="Preparing configuration for ${name}." indent:=4
    render templates/local-cmd cmd:="mkdir -p $servicePath"

    render templates/log message:="Generating etcd service file." indent:=6
    exec="$(render templates/exec-etcd name:="$name" basePath:="$KWM_ROOT_PATH" privateIp:="$privateIp" initialCluster:="$KWM_INITIAL_CLUSTER")"
    unit="$(render templates/systemd-unit name:="etcd" after:="network.target" requires:="" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/etcd.service"
  done

  for idx in ${!KWM_CONTROLLER_NAMES[@]}; do
    name=${KWM_CONTROLLER_NAMES[$idx]}
    privateIp=${KWM_CONTROLLER_PRIVATE_IPS[$idx]}
    servicePath=$name/etc/systemd/system
    render templates/log message:="Preparing configuration for ${name}." indent:=4
    render templates/local-cmd cmd:="mkdir -p $servicePath"

    render templates/log message:="Generating kube-apiserver service file." indent:=6
    exec="$(render templates/exec-kube-apiserver name:="$name" basePath:="$KWM_ROOT_PATH" privateIp:="$privateIp" serviceCidr:="$KWM_SERVICE_CIDR" etcdHosts:="$KWM_ETCD_HOSTS")"
    unit="$(render templates/systemd-unit name:="kube-apiserver" after:="network.target" requires:="" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/kube-apiserver.service"

    render templates/log message:="Generating kube-controller-manager service file." indent:=6
    exec="$(render templates/exec-kube-controller-manager basePath:="$KWM_ROOT_PATH" clusterName:="$KWM_CLUSTER_NAME" podCidr:="$KWM_POD_CIDR" serviceCidr:="$KWM_SERVICE_CIDR")"
    unit="$(render templates/systemd-unit name:="kube-controller-manager" after:="network.target" requires:="" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/kube-controller-manager.service"

    render templates/log message:="Generating kube-scheduler service file." indent:=6
    exec="$(render templates/exec-kube-scheduler)"
    unit="$(render templates/systemd-unit name:="kube-scheduler" after:="network.target" requires:="" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/kube-scheduler.service"
  done

  for idx in ${!KWM_NODE_NAMES[@]}; do
    name=${KWM_NODE_NAMES[$idx]}
    privateIp=${KWM_NODE_PRIVATE_IPS[$idx]}
    basePath=$name$KWM_ROOT_PATH
    servicePath=$name/etc/systemd/system
    cniPath=$name/etc/cni/net.d
    render templates/log message:="Preparing configuration for ${name}." indent:=4
    render templates/local-cmd cmd:="mkdir -p $basePath $servicePath $cniPath"

    render templates/log message:="Generating container networking bridge." indent:=6
    bridge="$(render templates/cni-bridge podCidr:="$KWM_POD_CIDR")"
    render templates/write-file contents:="$bridge" dest:="$cniPath/10-kube-router.conf"
    loopback="$(render templates/cni-loopback)"
    render templates/write-file contents:="$loopback" dest:="$cniPath/99-loopback.conf"

    render templates/log message:="Generating kublet service file." indent:=6
    exec="$(render templates/exec-kubelet basePath:="$KWM_ROOT_PATH" privateIp:="$privateIp" podCidr:="$KWM_POD_CIDR" dnsServiceIp:="$KWM_DNS_SERVICE_IP")"
    unit="$(render templates/systemd-unit name:="kubelet" after:="docker.service" requires:="docker.service" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/kubelet.service"

    render templates/log message:="Generating kube-router service file." indent:=6
    exec="$(render templates/exec-kube-router basePath:="$KWM_ROOT_PATH" podCidr:="$KWM_POD_CIDR")"
    unit="$(render templates/systemd-unit name:="kube-router" after:="network.target" requires:="" exec:="$exec")"
    render templates/write-file contents:="$unit" dest:="$servicePath/kube-router.service"

    render templates/log message:="Generating kubelet kubeconfig." indent:=6
    kubeconfig="$(render templates/kubeconfig name:="kubelet" user:="system:node:$name" basePath:="$KWM_ROOT_PATH" clusterName:="$KWM_CLUSTER_NAME" apiserver="$KWM_APISERVER")"
    render templates/write-file contents:="$unit" dest:="$basePath/kubelet.kubeconfig"

    render templates/log message:="Generating kube-router kubeconfig." indent:=6
    kubeconfig="$(render templates/kubeconfig name:="kube-router" user:="kube-router" basePath:="$KWM_ROOT_PATH" clusterName:="$KWM_CLUSTER_NAME" apiserver="$KWM_APISERVER")"
    render templates/write-file contents:="$unit" dest:="$basePath/kube-router.kubeconfig"
  done

  render templates/log message:="Rendering installation scripts." indent:=2

  for idx in ${!KWM_ETCD_NAMES[@]}; do
    name=${KWM_ETCD_NAMES[$idx]}
    render templates/log message:="Preparing install script for ${name}." indent:=4
    install="$(
      render templates/preamble
      render templates/log
      render templates/log message:="Preparing kubernetes etcd node." indent:=0
      render templates/log message:="Ensuring hostname and loopback reference are set." indent:=2
      render templates/set-hostname name:="$name"
      render templates/log message:="Installing etcd at version $KWM_VERSION_ETCD." indent:=2
      render templates/install-etcd version:="$KWM_VERSION_ETCD"
    )"
    render templates/write-file contents:="$install" dest:="$name/install.sh"
  done

  for idx in ${!KWM_CONTROLLER_NAMES[@]}; do
    name=${KWM_CONTROLLER_NAMES[$idx]}
    render templates/log message:="Preparing install script for ${name}." indent:=4
    install="$(
      render templates/preamble
      render templates/log
      render templates/log message:="Preparing kubernetes controller node." indent:=0
      render templates/log message:="Ensuring hostname and loopback reference are set." indent:=2
      render templates/set-hostname name:="$name"
      render templates/log message:="Installing kube-apiserver at version $KWM_VERSION_KUBERNETES." indent:=2
      render templates/install-k8s name="kube-apiserver" version:="$KWM_VERSION_KUBERNETES"
      render templates/log message:="Installing kube-controller-manager at version $KWM_VERSION_KUBERNETES." indent:=2
      render templates/install-k8s name="kube-controller-manager" version:="$KWM_VERSION_KUBERNETES"
      render templates/log message:="Installing kube-scheduler at version $KWM_VERSION_KUBERNETES." indent:=2
      render templates/install-k8s name="kube-scheduler" version:="$KWM_VERSION_KUBERNETES"
      render templates/log message:="Installing kubelet at version $KWM_VERSION_KUBERNETES." indent:=2
      render templates/install-k8s name="kubelet" version:="$KWM_VERSION_KUBERNETES"
      render templates/log message:="Installing socat to power kubectl proxy." indent:=2
      render templates/install-socat
    )"
    render templates/write-file contents:="$install" dest:="$name/install.sh"
  done

  for idx in ${!KWM_NODE_NAMES[@]}; do
    name=${KWM_NODE_NAMES[$idx]}
    render templates/log message:="Preparing install script for ${name}." indent:=4
    install="$(
      render templates/preamble
      render templates/log
      render templates/log message:="Preparing kubernetes worker node." indent:=0
      render templates/log message:="Ensuring hostname and loopback reference are set." indent:=2
      render templates/set-hostname name:="$name"
      render templates/log message:="Installing docker." indent:=2 # TODO: do not use apt / specify version
      render templates/install-docker
      render templates/log message:="Installing container networking plugins at version $KWM_VERSION_CNI_PLUGINS." indent:=2
      render templates/install-cni-plugins version:="$KWM_VERSION_CNI_PLUGINS"
      render templates/log message:="Installing kubelet at version $KWM_VERSION_KUBERNETES." indent:=2
      render templates/install-k8s name="kubelet" version:="$KWM_VERSION_KUBERNETES"
      render templates/log message:="Installing kube-router at version $KWM_VERSION_KUBE_ROUTER." indent:=2
      render templates/install-kube-router version:="$KWM_VERSION_KUBE_ROUTER"
    )"
    render templates/write-file contents:="$install" dest:="$name/install.sh"
  done

  render templates/log message:="Configuring kubectl for root access to cluster." indent:=2
  render templates/kubectl-root-access clusterName:="$KWM_CLUSTER_NAME" apiserver:="$KWM_APISERVER"
)"

mkdir -p $KWM_CLUSTER_PATH
save "$render" $KWM_CLUSTER_PATH/kwm
