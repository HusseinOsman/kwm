#!/usr/bin/env bash
# Kubernetes Without Magic
# A tool for learning how to operationalize Kubernetes.

. src/globals.sh
. src/connect.sh
. src/define.sh
. src/getenv.sh
. src/render.sh
. src/nodes.sh
. src/manifest.sh
. src/script.sh
. src/startup.sh
. src/unsetter.sh

##
# Wire command line arguments to method calls in the script.
# TODO: simplify with eval?
#
main() {
  local command=$1
  if [[ $command == connect ]]; then connect ${@:2}; exit 0; fi
  if [[ $command == define ]]; then define ${@:2}; exit 0; fi
  if [[ $command == env ]]; then getenv ${@:2}; exit 0; fi
  if [[ $command == help ]]; then render usage help; exit 0; fi
  if [[ $command == nodes ]]; then nodes ${@:2}; exit 0; fi
  if [[ $command == install ]]; then
    echo "export PATH=\$PATH:$SCRIPT_PATH"
    exit 0;
  fi
  if [[ $command == manifest ]]; then manifest ${@:2}; exit 0; fi
  if [[ $command == script ]]; then script ${@:2}; exit 0; fi
  if [[ $command == startup ]]; then startup; exit 0; fi
  if [[ $command == unset ]]; then unsetter; exit 0; fi
  if [[ $command == version ]]; then echo $VERSION; exit 0; fi
  render usage main
  exit 0
}

# Kick off the KWM, removing any command line flags from the argument listing.
# TODO: should I bother with an options parser?
main $(sed 's/ --ignore-missing-env//g' <<< "$@")
