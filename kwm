#!/bin/bash

function main {
  case "$1" in
    "context") context $2 $3 ;;
    "script") template script $2 ;;
    "manifest") template manifest $2 ;;
    "compose") render docs/compose ;;
    *) render docs/usage ;;
  esac
}

function value {
  local key=$1
  local value=$2
  if [ -z "$value" ]; then
    value=${!key}
  fi
  echo "$key=\"${value}\""
}

function colorize {
  if [ ! -t 0 ]; then
    printf "$(tput setaf 4)$1$(tput op)\n"
  fi
}

function compile {
  echo "cat <<RENDER"
  cat "/Users/tkellen/code/kube/templates/$1"
  echo "RENDER"
}

function render {
  compile $@ | bash
}
export -f value colorize compile render

function parse-input {
  KWM_ETCD_NAMES=(${KWM_ETCD_NAMES//,/ })
  KWM_ETCD_SSH_IPS=(${KWM_ETCD_SSH_IPS//,/ })
  KWM_ETCD_PRIVATE_IPS=(${KWM_ETCD_PRIVATE_IPS//,/ })
  KWM_CONTROLPLANE_NAMES=(${KWM_CONTROLPLANE_NAMES//,/ })
  KWM_CONTROLPLANE_SSH_IPS=(${KWM_CONTROLPLANE_SSH_IPS//,/ })
  KWM_CONTROLPLANE_PRIVATE_IPS=(${KWM_CONTROLPLANE_PRIVATE_IPS//,/ })
  KWM_WORKER_NAMES=(${KWM_WORKER_NAMES//,/ })
  KWM_WORKER_SSH_IPS=(${KWM_WORKER_SSH_IPS//,/ })
  KWM_WORKER_PRIVATE_IPS=(${KWM_WORKER_PRIVATE_IPS//,/ })
  for i in ${!KWM_ETCD_NAMES[@]}; do
    KWM_ETCD_INITIAL_CLUSTER+=",${KWM_ETCD_NAMES[$i]}=https://${KWM_ETCD_PRIVATE_IPS[$i]}:2380"
    KWM_ETCD_HOSTS+=",https://${KWM_ETCD_PRIVATE_IPS[$i]}:2379"
    KWM_ETCD_CLIENT_SUBJECT_NAMES+=",IP:${KWM_ETCD_PRIVATE_IPS[$i]},DNS:${KWM_ETCD_NAMES[$i]}"
  done
  KWM_ETCD_INITIAL_CLUSTER=${KWM_ETCD_INITIAL_CLUSTER:1}
  KWM_ETCD_HOSTS=${KWM_ETCD_HOSTS:1}
  KWM_ETCD_CLIENT_SUBJECT_NAMES=${KWM_ETCD_CLIENT_SUBJECT_NAMES:1}
}

function context {
  local type=$1
  local idx=$2
  parse-input
  # dynamically get array of the following:
  # KWM_<TYPE>_NAMES
  # KWM_<TYPE>_SSH_IPS
  # KWM_<TYPE>_PRIVATE_IPS
  CONTEXT=$(echo $type | awk '{print toupper($0)}')
  NAMES="KWM_${CONTEXT}_NAMES[@]"
  SSH_IPS="KWM_${CONTEXT}_SSH_IPS[@]"
  PRIVATE_IPS="KWM_${CONTEXT}_PRIVATE_IPS[@]"
  NAMES=(${!NAMES})
  SSH_IPS=(${!SSH_IPS})
  PRIVATE_IPS=(${!PRIVATE_IPS})
  # render needed context for specified type
  KWM_HOSTNAME="${NAMES[$idx]}" \
  KWM_CONNECT="${KWM_EXEC}${SSH_IPS[$idx]}" \
  KWM_SSH_IP="${SSH_IPS[$idx]}" \
  KWM_PRIVATE_IP="${PRIVATE_IPS[$idx]}" \
  KWM_ETCD_INITIAL_CLUSTER=${KWM_ETCD_INITIAL_CLUSTER} \
  KWM_ETCD_HOSTS=${KWM_ETCD_HOSTS} \
  KWM_ETCD_CLIENT_SUBJECT_NAMES=${KWM_ETCD_CLIENT_SUBJECT_NAMES} \
  render context/$type
}

function template {
  local namespace=$1
  local type=$2
  local output
  # if no type is supplied as argument, check environment
  type=${type:-$KWM_TYPE}
  # show usage if no typed is defined
  if [ -z "$type" ]; then
    render docs/generate
    exit 1
  fi
  # colorize variables when stdout is a terminal
  if [ -t 1 ]; then
    for name in ${!KWM*}; do
      eval $name=\"¦¦${!name}¦¦\"
    done
  fi
  case "${type:-$KWM_TYPE}" in
    "")
      echo "nope"
      ;;
    *)
      output=$(render $namespace/$type)
      ;;
  esac
  # colorize variables when stdout is a terminal
  sed "s/\(¦¦\)\([^¦¦]*\)\(¦¦\)/$(tput setaf 4)\2$(tput op)/g" <<< "$output"
}

main "$@"
