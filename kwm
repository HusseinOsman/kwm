#!/bin/bash

function header {
  message=$1
  printf "\033[0;34m${message}\033[0m\n"
}

function render {
  local path=$1
  local source="$(cat $path)"
  for item in "${@:2}"; do
    local find=${item%:=*};
    local replace=${item#*:=};
    # escape replacement text
    IFS= read -d '' -r < <(sed -e ':a' -e '$!{N;ba' -e '}' -e 's/[&/\]/\\&/g; s/\n/\\&/g' <<< "$replace")
    local escaped=${REPLY%$'\n'}
    source="$(
      echo "$source" | sed -e "s^"\\\${${find}}"^$escaped^g"
    )"
  done
  echo "$source"
}

# Split comma-delimited environment variables into arrays.
KWM_CONTROLLER_NAMES=(${KWM_CONTROLLER_NAMES//,/ })
KWM_CONTROLLER_SSH_IPS=(${KWM_CONTROLLER_SSH_IPS//,/ })
KWM_CONTROLLER_PRIVATE_IPS=(${KWM_CONTROLLER_PRIVATE_IPS//,/ })
KWM_ETCD_NAMES=(${KWM_ETCD_NAMES//,/ })
KWM_ETCD_SSH_IPS=(${KWM_ETCD_SSH_IPS//,/ })
KWM_ETCD_PRIVATE_IPS=(${KWM_ETCD_PRIVATE_IPS//,/ })
KWM_NODE_NAMES=(${KWM_NODE_NAMES//,/ })
KWM_NODE_SSH_IPS=(${KWM_NODE_SSH_IPS//,/ })
KWM_NODE_PRIVATE_IPS=(${KWM_NODE_PRIVATE_IPS//,/ })

# Derive some additional variables from the supplied input.
KWM_CLUSTER_PATH=cluster/$KWM_CLUSTER_NAME
KWM_MANIFEST_PATH=cluster/$KWM_CLUSTER_NAME/manifests
KWM_APISERVER=${KWM_CONTROLLER_SSH_IPS[0]}
for idx in ${!KWM_ETCD_NAMES[@]}; do
  KWM_ETCD_INITIAL_CLUSTER+=",${KWM_ETCD_NAMES[$idx]}=https://${KWM_ETCD_PRIVATE_IPS[$idx]}:2380"
  KWM_ETCD_HOSTS+=",https://${KWM_ETCD_PRIVATE_IPS[$idx]}:2379"
  KWM_ETCD_CLIENT_SUBJECT_NAMES+=",IP:${KWM_ETCD_PRIVATE_IPS[$idx]},DNS:${KWM_ETCD_NAMES[$idx]}"
done
KWM_ETCD_INITIAL_CLUSTER=${KWM_ETCD_INITIAL_CLUSTER:1}
KWM_ETCD_HOSTS=${KWM_ETCD_HOSTS:1}
KWM_ETCD_CLIENT_SUBJECT_NAMES=${KWM_ETCD_CLIENT_SUBJECT_NAMES:1}
KWM_ROOT_PATH=/etc/kubernetes

function check-overwrite {
  if [ -d "$KWM_CLUSTER_PATH" ]; then
    echo "Cluster assets for \"$KWM_CLUSTER_NAME\" have been built already."
    printf "\n"
    read -p "Overwrite? [y/n]: " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf $KWM_CLUSTER_PATH
      printf "\n\nDestroying $KWM_CLUSTER_PATH.\n\n"
    else
      printf "\nExiting."
      exit 0
    fi
  fi
}

function validate {
  required=$(source settings.example; echo ${!KWM*})
  failed=""
  for var in ${required[@]}; do
    [[ -z "${!var}" ]] && failed+=", ${var}"
  done
  if [ ! -z "$failed" ]; then
    header "Some settings are missing:"
    echo -e "${failed:2}\n"
    header "Before trying again, you may wish to answer these questions:"
    echo "Have I written or generated a settings file yet?"
    echo "Have I exported my settings into my environment? (e.g. \"source my-settings-file\")"
    echo "Does my settings file contain all the needed variables?"
    exit 1
  fi
}

function main {
  header "Welcome to Kubernetes Without Magic\n"
  validate
  check-overwrite
  review

  local installers

  mkdir -p $KWM_CLUSTER_PATH

  header "Generating your etcd assets."
  for idx in ${!KWM_ETCD_NAMES[@]}; do
    local name=${KWM_ETCD_NAMES[$idx]}
    local sshIp=${KWM_ETCD_SSH_IPS[$idx]}
    local privateIp=${KWM_ETCD_PRIVATE_IPS[$idx]}
    local installPath=$KWM_CLUSTER_PATH/$name
    local servicePath=$KWM_CLUSTER_PATH/$name/etc/systemd/system
    mkdir -p $installPath $servicePath
    echo "[$name] Rendering your etcd service file."
    etcd-service $name $privateIp $KWM_ROOT_PATH $KWM_ETCD_INITIAL_CLUSTER > "$servicePath/etcd.service"
    echo "[$name] Rendering your installer."
    etcd-install $name $KWM_SSH_USER $sshIp $privateIp $KWM_ROOT_PATH $KWM_VERSION_ETCD >> "$installPath/install"
    chmod +x $installPath/install
    installers+="./$installPath/install\n"
  done

  header "Generating your control plane assets."
  for idx in ${!KWM_CONTROLLER_NAMES[@]}; do
    local name=${KWM_CONTROLLER_NAMES[$idx]}
    local privateIp=${KWM_CONTROLLER_PRIVATE_IPS[$idx]}
    local sshIp=${KWM_CONTROLLER_SSH_IPS[$idx]}
    local installPath=$KWM_CLUSTER_PATH/$name
    local servicePath=$KWM_CLUSTER_PATH/$name/etc/systemd/system
    mkdir -p $installPath $servicePath
    echo "[$name] Rendering your kube-apiserver service file."
    kube-apiserver-service $name $privateIp $KWM_ROOT_PATH $KWM_SERVICE_CIDR $KWM_ETCD_HOSTS > "$servicePath/kube-apiserver.service"
    echo "[$name] Rendering your kube-controller-manager service file."
    kube-controller-manager-service $KWM_CLUSTER_NAME $KWM_ROOT_PATH $KWM_POD_CIDR $KWM_SERVICE_CIDR > "$servicePath/kube-controller-manager.service"
    echo "[$name] Rendering your kube-scheduler service file."
    kube-scheduler-service > $servicePath/kube-scheduler.service
    echo "[$name] Rendering your installer."
    controlplane-install $name $KWM_SSH_USER $sshIp $privateIp $KWM_ROOT_PATH $KWM_KUBERNETES_SERVICE_IP $KWM_VERSION_KUBERNETES >> "$installPath/install"
    chmod +x $installPath/install
    installers+="./$installPath/install\n"
  done

  header "Generating your node assets."
  for idx in ${!KWM_NODE_NAMES[@]}; do
    local name=${KWM_NODE_NAMES[$idx]}
    local privateIp=${KWM_NODE_PRIVATE_IPS[$idx]}
    local sshIp=${KWM_NODE_SSH_IPS[$idx]}
    local rootPath=$KWM_CLUSTER_PATH/$name$KWM_ROOT_PATH
    local installPath=$KWM_CLUSTER_PATH/$name
    local servicePath=$KWM_CLUSTER_PATH/$name/etc/systemd/system
    local containerNetworkPath=$KWM_CLUSTER_PATH/$name/etc/cni/net.d
    mkdir -p $rootPath $installPath $servicePath $containerNetworkPath

    echo "[$name] Rendering kubelet.kubeconfig."
    kubeconfig kubelet system:node:$name $KWM_CLUSTER_NAME $KWM_ROOT_PATH $KWM_APISERVER > "$rootPath/kubelet.kubeconfig"
    echo "[$name] Rendering kube-router.kubeconfig."
    kubeconfig kube-router kube-router $KWM_CLUSTER_NAME $KWM_ROOT_PATH $KWM_APISERVER > "$rootPath/kube-router.kubeconfig"
    echo "[$name] Rendering container network bridge configuration."
    container-network-bridge $KWM_POD_CIDR > "$containerNetworkPath/10-kuberouter.conf"
    echo "[$name] Rendering container network loopback configuration."
    container-network-loopback $KWM_POD_CIDR > "$containerNetworkPath/99-loopback.conf"
    echo "[$name] Rendering kublet service file."
    kubelet-service $KWM_POD_CIDR $KWM_ROOT_PATH $privateIp $KWM_DNS_SERVICE_IP > "$servicePath/kubelet.service"
    echo "[$name] Rendering kube-router service file."
    kube-router-service $KWM_POD_CIDR $KWM_ROOT_PATH > "$servicePath/kube-router.service"
    echo "[$name] Rendering your installer."
    node-install $name $KWM_SSH_USER $sshIp $privateIp $KWM_ROOT_PATH $KWM_VERSION_CNI_PLUGIN $KWM_VERSION_KUBERNETES $KWM_VERSION_KUBE_ROUTER >> "$installPath/install"
    chmod +x $installPath/install
    installers+="./$installPath/install\n"
  done

  header "Generating your public key infrastructure installer."
  local pkiCmd=$KWM_CLUSTER_PATH/genpki
  pki > $pkiCmd
  chmod +x $pkiCmd
  echo "Running ./$pkiCmd will generate your PKI."

  header "Building your cluster administrator access commands."
  local getRoot=$KWM_CLUSTER_PATH/getroot
  admin > $getRoot
  chmod +x $getRoot
  echo "Running ./$getRoot will configure your kubectl to control the cluster."

  header "To bootstrap your hosts, run the following."
  echo -e "$installers"
}

function review {
  echo "Your settings will now be shown individually."
  echo "Enter 'y' or 'n' for each to confirm accuracy and your understanding."
  for name in ${!KWM*}; do
    printf "\n"
    read -p "$name=${!name} [y/n]: " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      continue
    else
      printf "\nExiting."
      exit 0
    fi
  done
  printf "\n\n"
}

function pki {
  render templates/preamble

  render templates/dir-exists dir:="pki" true:="echo 'PKI has already been generated.'; exit 1" false:=":"

  render templates/log message:="Rendering public key infrastructure."
  render templates/local-cmd cmd:="mkdir -p pki"

  render templates/log message:="Generating cluster certificate authority."
  render templates/init-ca name:="cluster" subj:="/CN=$KWM_CLUSTER_NAME" basePath:="pki"

  render templates/log message:="Generating private key for cluster admin to apiserver communication."
  render templates/private-key name:="cluster-admin-to-apiserver" basePath:="pki"

  render templates/log message:="Generating cluster-ca signed certificate for cluster admin to apiserver communication."
  render templates/signed-cert ca:="cluster" name:="cluster-admin-to-apiserver" subj:="/CN=root/O=system:masters" ext:="" basePath:="pki" caPath:="pki"

  render templates/log message:="Generating etcd certificate authority."
  render templates/init-ca name:="etcd" subj:="/CN=etcd-ca" basePath:="pki"

  render templates/log message:="Generating private key for apiserver to etcd server communication."
  render templates/private-key name:="apiserver-to-etcd" basePath:="pki"

  render templates/log message:="Generating etcd-ca signed certificate for apiserver to etcd communication."
  render templates/signed-cert ca:="etcd" name:="apiserver-to-etcd" subj:="/CN=etcd" ext:="subjectAltName = $KWM_ETCD_CLIENT_SUBJECT_NAMES" basePath:="pki" caPath:="pki"

  # TODO: get TLS bootstrapping going to eliminate some PKI creation
  # https://kubernetes.io/docs/admin/bootstrap-tokens/
  render templates/log message:="Generating public/private keypair for service accounts"
  render templates/private-key name:="service-account" basePath:="pki"
  render templates/public-key name:="service-account" basePath:="pki"
}

function etcd-install {
  local name=$1
  local sshUser=$2
  local sshIp=$3
  local privateIp=$4
  local basePath=$5
  local version=$6

  render templates/preamble
  render templates/dir-exists dir:="../pki" true:=":" false:="echo 'PKI missing. Please run \"../genpki\" and try again.'; exit 1"
  render templates/header message:="Preparing PKI package for $name."
  render templates/local-cmd cmd:="mkdir -p .$basePath"
  render templates/log message:="Pulling in shared PEM files."
  render templates/local-cmd cmd:="cp ../pki/etcd-ca-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/etcd-ca-private-key.pem .$basePath" # TODO: REMOVE
  render templates/local-cmd cmd:="cp ../pki/apiserver-to-etcd-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/apiserver-to-etcd-private-key.pem .$basePath"
  render templates/log message:="Generating private key for etcd server to etcd server communication."
  render templates/private-key name:="etcd-to-etcd" basePath:=".$basePath"
  render templates/log message:="Generating etcd-ca signed certificate for etcd server to etcd server communication."
  render templates/signed-cert ca:="etcd" name:="etcd-to-etcd" subj:="/CN=etcd-to-etcd/O=etcd" ext:="subjectAltName = IP:$privateIp,DNS:$name" basePath:=".$basePath" caPath:=".$basePath"
  render templates/header message:="Bootstrapping $sshUser@$sshIp."
  render templates/install user:="$sshUser" host:="$sshIp" cmd:="$(
    render templates/log message:="Ensuring hostname and loopback reference are set."
    render templates/set-hostname name:="$name"
    render templates/log message:="Installing etcd at version $version."
    render templates/install-etcd version:="$version"
    render templates/log message:="Enabling and restarting service."
    render templates/enable-service name:="etcd"
  )"
}

function controlplane-install {
  local name=$1
  local sshUser=$2
  local sshIp=$3
  local privateIp=$4
  local basePath=$5
  local kubernetesServiceIp=$6
  local version=$7

  render templates/preamble
  render templates/dir-exists dir:="../pki" true:=":" false:="echo 'PKI missing. Please run \"../genpki\" and try again.'; exit 1"
  render templates/header message:="Preparing PKI package for $name."
  render templates/local-cmd cmd:="mkdir -p .$basePath"
  render templates/log message:="Pulling in shared PEM files."
  render templates/local-cmd cmd:="cp ../pki/cluster-ca-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/cluster-ca-private-key.pem .$basePath" # TODO: REMOVE
  render templates/local-cmd cmd:="cp ../pki/etcd-ca-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/etcd-ca-private-key.pem .$basePath" # TODO: REMOVE
  render templates/local-cmd cmd:="cp ../pki/apiserver-to-etcd-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/apiserver-to-etcd-private-key.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/service-account*.pem .$basePath"
  render templates/log message:="Generating private key for client to apiserver communication."
  render templates/private-key name:="client-to-apiserver" basePath:=".$basePath"
  render templates/log message:="Generating private key for apiserver to kubelet communication."
  render templates/private-key name:="apiserver-to-kubelet" basePath:=".$basePath"
  render templates/log message:="Generating cluster-ca signed certificate for client to apiserver communication."
  render templates/signed-cert ca:="cluster" name:="client-to-apiserver" subj:="/CN=kube-apiserver" ext:="subjectAltName = IP:$kubernetesServiceIp,IP:$sshIp,IP:$privateIp,DNS:$name,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster,DNS:kubernetes.default.svc.cluster.local" basePath:=".$basePath" caPath:=".$basePath"
  render templates/log message:="Generating cluster-ca signed certificate for apiserver to kubelet communication."
  render templates/signed-cert ca:="cluster" name:="apiserver-to-kubelet" subj:="/CN=kube-apiserver-client/O=system:masters" ext:="" basePath:=".$basePath" caPath:=".$basePath"
  render templates/header message:="Bootstrapping $sshUser@$sshIp."
  render templates/install user:="$sshUser" host:="$sshIp" cmd:="$(
    render templates/log message:="Ensuring hostname and loopback reference are set."
    render templates/set-hostname name:="$name"
    render templates/log message:="Installing kube-apiserver at version $version."
    render templates/install-k8s name:="kube-apiserver" version:="$version"
    render templates/log message:="Enabling kube-apiserver service."
    render templates/enable-service name:="kube-apiserver"
    render templates/log message:="Installing kube-controller-manager at version $version."
    render templates/install-k8s name:="kube-controller-manager" version:="$version"
    render templates/log message:="Enabling kube-controller-manager service."
    render templates/enable-service name:="kube-controller-manager"
    render templates/log message:="Installing kube-scheduler at version $version."
    render templates/install-k8s name:="kube-scheduler" version:="$version"
    render templates/log message:="Enabling kube-scheduler service."
    render templates/enable-service name:="kube-scheduler"
    render templates/log message:="Installing kubectl at version $version."
    render templates/install-k8s name:="kubectl" version:="$version"
  )"
}

function node-install {
  local name=$1
  local sshUser=$2
  local sshIp=$3
  local privateIp=$4
  local basePath=$5
  local cniPluginVersion=$6
  local kubernetesVersion=$7
  local kubeRouterVersion=$8

  render templates/preamble
  render templates/dir-exists dir:="../pki" true:=":" false:="echo 'PKI missing. Please run \"../genpki\" and try again.'; exit 1"
  render templates/header message:="Preparing PKI package for $name."
  render templates/local-cmd cmd:="mkdir -p .$basePath"
  render templates/log message:="Pulling in shared PEM files."
  render templates/local-cmd cmd:="cp ../pki/cluster-ca-cert.pem .$basePath"
  render templates/local-cmd cmd:="cp ../pki/cluster-ca-private-key.pem .$basePath" # TODO: REMOVE
  render templates/log message:="Generating private key for kublet."
  render templates/private-key name:="kubelet" basePath:=".$basePath"
  render templates/log message:="Generating private key for kube-router."
  render templates/private-key name:="kube-router" basePath:=".$basePath"
  render templates/log message:="Generating cluster-ca signed certificate for kubelet to apiserver communication."
  render templates/signed-cert ca:="cluster" name:="kubelet" subj:="/CN=system:node:$name/O=system:nodes" ext:="subjectAltName = IP:$privateIp,DNS:$name" basePath:=".$basePath" caPath:=".$basePath"
  render templates/log message:="Generating cluster-ca signed certificate for kube-router to apiserver communication."
  render templates/signed-cert ca:="cluster" name:="kube-router" subj:="/CN=kube-proxy" ext:="" basePath:=".$basePath" caPath:=".$basePath"

  # MAJOR HACK ALERT: FIX THIS
  # MAJOR HACK ALERT: FIX THIS
  # MAJOR HACK ALERT: FIX THIS
  # MAJOR HACK ALERT: FIX THIS
  # MAJOR HACK ALERT: FIX THIS
  # MAJOR HACK ALERT: FIX THIS
  #echo "kubectl create clusterrolebinding proxy-binding --clusterrole=cluster-admin --user=kube-proxy"
  # FOR SOME REASON KUBE-ROUTER CANNOT AUTH TO THE APISERVER

  render templates/header message:="Bootstrapping $sshUser@$sshIp."
  render templates/install user:="$sshUser" host:="$sshIp" cmd:="$(
    render templates/log message:="Ensuring hostname and loopback reference are set."
    render templates/set-hostname name:="$name"
    render templates/log message:="Installing docker."
    render templates/install-docker
    render templates/log message:="Installing container networking plugins at version $cniPluginVersion."
    render templates/install-cni-plugins version:="$cniPluginVersion"
    render templates/log message:="Installing kubelet at version $kubernetesVersion."
    render templates/install-k8s name:="kubelet" version:="$kubernetesVersion"
    render templates/enable-service name:="kubelet"
    render templates/log message:="Installing kube-router at version $kubeRouterVersion."
    render templates/install-kube-router version:="$kubeRouterVersion"
    render templates/enable-service name:="kube-router"
    render templates/log message:="Installing socat to power kubectl proxy."
    render templates/install-socat
  )"
}

function etcd-service {
  local name=$1
  local privateIp=$2
  local basePath=$3
  local initialCluster=$4
  cmd="$(render templates/exec-etcd name:="$name" basePath:="$basePath" privateIp:="$privateIp" initialCluster:="$initialCluster")"
  render templates/systemd-unit name:="etcd" after:="network.target" requires:="" exec:="$cmd"
}

function kube-apiserver-service {
  local name=$1
  local privateIp=$2
  local basePath=$3
  local serviceCidr=$4
  local etcdHosts=$5
  local exec="$(render templates/exec-kube-apiserver name:="$name" basePath:="$basePath" privateIp:="$privateIp" serviceCidr:="$serviceCidr" etcdHosts:="$etcdHosts")"
  render templates/systemd-unit name:="kube-apiserver" after:="network.target" requires:="" exec:="$exec"
}

function kube-controller-manager-service {
  local clusterName=$1
  local basePath=$2
  local podCidr=$3
  local serviceCidr=$4
  local exec="$(render templates/exec-kube-controller-manager basePath:="$KWM_ROOT_PATH" clusterName:="$KWM_CLUSTER_NAME" podCidr:="$KWM_POD_CIDR" serviceCidr:="$KWM_SERVICE_CIDR")"
  render templates/systemd-unit name:="kube-controller-manager" after:="network.target" requires:="" exec:="$exec"
}

function kube-scheduler-service {
  local exec="$(render templates/exec-kube-scheduler)"
  render templates/systemd-unit name:="kube-scheduler" after:="network.target" requires:="" exec:="$exec"
}

function container-network-bridge {
  local podCidr=$1
  render templates/container-network-bridge podCidr:="$podCidr"
}

function container-network-loopback {
  render templates/container-network-loopback
}

function kubelet-service {
  local podCidr=$1
  local basePath=$2
  local privateIp=$3
  local dnsServiceIp=$4
  local exec="$(render templates/exec-kubelet basePath:="$basePath" privateIp:="$privateIp" podCidr:="$podCidr" dnsServiceIp:="$dnsServiceIp")"
  render templates/systemd-unit name:="kubelet" after:="docker.service" requires:="docker.service" exec:="$exec"
}

function kube-router-service {
  local podCidr=$1
  local basePath=$2
  local exec="$(render templates/exec-kube-router basePath:="$basePath" podCidr:="$podCidr")"
  render templates/systemd-unit name:="kube-router" after:="network.target" requires:="" exec:="$exec"
}

function kubeconfig {
  local name=$1
  local user=$2
  local clusterName=$3
  local basePath=$4
  local apiserver=$5
  render templates/kubeconfig name:="$name" user:="$user" basePath:="$basePath" clusterName:="$clusterName" apiserver:="$apiserver"
}

function admin {
  render templates/preamble
  render templates/log message:="Configuring kubectl for root access to cluster."
  render templates/kubectl-root-access clusterName:="$KWM_CLUSTER_NAME" apiserver:="$KWM_APISERVER"
}

main "$@"
