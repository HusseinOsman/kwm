#------------------------------------------------------------------------------#
# Preparing cluster assets.
#------------------------------------------------------------------------------#
mkdir -p $KWM_CONFIG_PATH_LOCAL
$SCRIPT_NAME render encryption-config > $KWM_CONFIG_PATH_LOCAL/encryption-config.yml
$SCRIPT_NAME render pki | bash 2>&1 | sed 's/^/[rendering pki] /'
$SCRIPT_NAME nodes all | xargs -n1 -I {nodeKey} $SCRIPT_NAME render copy-node-assets {nodeKey} | bash 2>&1 | sed 's/^/[copying assets] /'
#------------------------------------------------------------------------------#
# Configuring your etcd nodes.
#------------------------------------------------------------------------------#
$SCRIPT_NAME nodes etcd | xargs -n1 -I {nodeKey} bash -c '
  kwm connect {nodeKey} <<<"sudo su; \$($SCRIPT_NAME render start-etcd-node {nodeKey} | bash)"
' 2>&1 | sed 's/^/[etcd] /'
#------------------------------------------------------------------------------#
# Configuring your controlplane nodes.
#------------------------------------------------------------------------------#
$SCRIPT_NAME nodes controlplane | xargs -n1 -I {nodeKey} bash -c '
  kwm connect {nodeKey} <<<"sudo su; \$($SCRIPT_NAME render start-controlplane-node {nodeKey} | bash)"
' 2>&1 | sed 's/^/[controlplane] /'
#------------------------------------------------------------------------------#
# Configuring your worker nodes.
#------------------------------------------------------------------------------#
$SCRIPT_NAME nodes worker | xargs -n1 -I {nodeKey} bash -c '
  kwm connect {nodeKey} <<<"sudo su; \$($SCRIPT_NAME render start-worker-node {nodeKey} | bash)"
' 2>&1 | sed 's/^/[worker] /'
#------------------------------------------------------------------------------#
# Configuring kubectl for cluster-admin level access.
#------------------------------------------------------------------------------#
$SCRIPT_NAME render cluster-admin | bash 2>&1 | sed 's/^/[configuring kubectl] /'
#------------------------------------------------------------------------------#
# Installing a container networking plugin.
#------------------------------------------------------------------------------#
$SCRIPT_NAME render cni-manifest | kubectl --context=$KWM_CLUSTER_NAME apply -f - | sed 's/^/[container networking] /'
#------------------------------------------------------------------------------#
# Installing kube-dns.
#------------------------------------------------------------------------------#
$SCRIPT_NAME render dns-manifest | kubectl --context=$KWM_CLUSTER_NAME apply -f - | sed 's/^/[cluster dns] /'
#------------------------------------------------------------------------------#
# HACK bouncing containerd to pick up cni settings.
#------------------------------------------------------------------------------#
sleep 30
(($SCRIPT_NAME nodes controlplane && $SCRIPT_NAME nodes worker) | uniq |
  xargs -n1 -I {nodeKey} bash -c "echo 'sudo systemctl restart containerd' | $SCRIPT_NAME connect {nodeKey}"
) 2>&1 | sed 's/^/[hack] /'
#------------------------------------------------------------------------------#
# Confirming the cluster is functional.
#------------------------------------------------------------------------------#
sleep 60
kubectl --context=${KWM_CLUSTER_NAME} get componentstatus
kubectl --context=${KWM_CLUSTER_NAME} get nodes -o wide
kubectl --context=${KWM_CLUSTER_NAME} get pods -o wide --all-namespaces
